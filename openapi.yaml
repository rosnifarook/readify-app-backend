openapi: 3.0.3
info:
  title: Readify Backend API
  version: 1.0.0
servers:
  - url: /
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Book:
      type: object
      properties:
        _id: { type: string }
        title: { type: string }
        category: { type: string }
        newPrice: { type: number }
        coverImage: { type: string }
        trending: { type: boolean }
      additionalProperties: true
    Order:
      type: object
      properties:
        _id: { type: string }
        name: { type: string }
        email: { type: string }
        phone: { type: string }
        address:
          type: object
          properties:
            city: { type: string }
            state: { type: string }
            country: { type: string }
            zipcode: { type: string }
        productIds:
          type: array
          items: { type: string }
        totalPrice: { type: number }
      additionalProperties: true
    AdminAuthRequest:
      type: object
      required: [username, password]
      properties:
        username: { type: string }
        password: { type: string }
    AdminAuthResponse:
      type: object
      properties:
        message: { type: string }
        token: { type: string }
        user:
          type: object
          properties:
            username: { type: string }
            role: { type: string }
paths:
  /:
    get:
      summary: Health
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema: { type: string }

  /api/books:
    get:
      summary: List books
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Book' }

  /api/books/{id}:
    get:
      summary: Get a single book
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Book' }
        '404':
          description: Not Found
    delete:
      summary: Delete a book
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200': { description: Deleted }
        '401': { description: Unauthorized }
        '403': { description: Forbidden }
        '404': { description: Not Found }

  /api/books/create-book:
    post:
      summary: Create a book
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/Book' }
      responses:
        '201': { description: Created }
        '401': { description: Unauthorized }
        '403': { description: Forbidden }

  /api/books/edit/{id}:
    put:
      summary: Update a book
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/Book' }
      responses:
        '200': { description: OK }
        '401': { description: Unauthorized }
        '403': { description: Forbidden }
        '404': { description: Not Found }



  /api/orders:
    post:
      summary: Create order
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/Order' }
      responses:
        '201': { description: Created }

  /api/orders/email/{email}:
    get:
      summary: Get orders by email
      parameters:
        - in: path
          name: email
          required: true
          schema: { type: string, format: email }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Order' }

  /api/admin:
    get:
      summary: Admin stats
      description: Returns totals and monthly sales
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalOrders: { type: integer }
                  totalSales: { type: number }
                  trendingBooks: { type: integer }
                  totalBooks: { type: integer }
                  monthlySales:
                    type: array
                    items:
                      type: object
                      properties:
                        _id: { type: string }
                        totalSales: { type: number }
                        totalOrders: { type: integer }
        '401': { description: Unauthorized }
        '403': { description: Forbidden }

  /api/auth/admin:
    post:
      summary: Admin login
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/AdminAuthRequest' }
      responses:
        '200':
          description: Authenticated
          content:
            application/json:
              schema: { $ref: '#/components/schemas/AdminAuthResponse' }
        '401': { description: Unauthorized }
        '404': { description: Not Found }


